name: Build Python Wheels

on:
  push:
    branches:
      - main
      - develop
    paths-ignore: # Only trigger if these paths are NOT changed
      - '**.md' # Ignore Markdown files (like README.md)
      - 'docs/**' # Ignore changes in the docs folder
      - 'LICENSE' # Ignore license file changes
      - '.github/workflows/README.md' # Specific workflow README
  pull_request:
    branches:
      - main
      - develop
    paths-ignore: # Only trigger if these paths are NOT changed
      - '**.md' # Ignore Markdown files (like README.md)
      - 'docs/**' # Ignore changes in the docs folder
      - 'LICENSE' # Ignore license file changes
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120 # Set a higher timeout for the job (e.g., 120 minutes)
    permissions:
      contents: read
      packages: write # Crucial for pushing to GitHub Packages
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
      fail-fast: false # Ensures all jobs run even if one fails
    env:
      # Define VCPKG_ROOT for Windows (used in Windows-specific steps)
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg

      # --- Global CIBW environment variables (reintroduced) ---
      # These flags are intended to be set as environment variables, not in pyproject.toml.
      CIBW_FORCE_INSTALL: "1"
      CIBW_DEBUG: "1"
      CIBW_PRERELEASE_PYTHONS: "True"


    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # --- Start Vcpkg Caching ---
    # Cache the vcpkg tool itself (cloned repository)
    - name: Cache vcpkg tool
      id: cache-vcpkg-tool
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg
        key: ${{ runner.os }}-vcpkg-tool-${{ hashFiles('vcpkg/.git/HEAD') }} # Key changes if vcpkg repo updates
        restore-keys: |
          ${{ runner.os }}-vcpkg-tool-

    # Cache vcpkg's installed binary packages (pre-built RocksDB)
    - name: Cache vcpkg installed packages
      id: cache-vcpkg-installed
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg/installed
        key: ${{ runner.os }}-vcpkg-installed-${{ hashFiles('vcpkg/vcpkg.exe') }}-${{ hashFiles('vcpkg/ports/rocksdb/portfile.cmake') }} # Key for installed packages
        restore-keys: |
          ${{ runner.os }}-vcpkg-installed-
    # --- End Vcpkg Caching ---

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # cibuildwheel will manage specific Python versions
        architecture: 'x64' # Ensure 64-bit Python is set up


    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel

    # --- macOS Specific Steps ---
    - name: Install RocksDB (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install rocksdb

    - name: Get Homebrew prefix (macOS)
      if: runner.os == 'macOS'
      # Set BREW_PREFIX as an environment variable that cibuildwheel will pick up
      run: echo "BREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
      shell: bash

    - name: Debug RocksDB Paths (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "Homebrew prefix: ${{ env.BREW_PREFIX }}"
        echo "--- Listing contents of ${{ env.BREW_PREFIX }}/include/ ---"
        ls -R "${{ env.BREW_PREFIX }}/include/" | grep -E "rocksdb|db.h" || true
        echo "--- Listing contents of ${{ env.BREW_PREFIX }}/lib/ ---"
        ls -R "${{ env.BREW_PREFIX }}/lib/" | grep -E "rocksdb|librocksdb" || true
      shell: bash

    # --- Windows Specific Steps (Vcpkg and RocksDB Installation) ---
    - name: Export GitHub Actions cache environment variables (for Windows)
      uses: actions/github-script@v7
      if: runner.os == 'Windows'

      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install RocksDB (Windows via vcpkg)
      if: runner.os == 'Windows'
      run: |
        # 1. Bootstrap vcpkg
        git clone https://github.com/microsoft/vcpkg.git "${{ env.VCPKG_ROOT }}"
        cmd /c "`"${{ env.VCPKG_ROOT }}\bootstrap-vcpkg.bat`" -disableMetrics"
        
        # 2. Get the path to the nuget.exe that vcpkg uses internally.
        # This command outputs the path directly to stdout.
        $NuGetExePath = & "${{ env.VCPKG_ROOT }}\vcpkg.exe" fetch nuget
        
        # Trim any whitespace, newlines, or quotation marks from the output.
        $NuGetExePath = $NuGetExePath.Trim()
        $NuGetExePath = $NuGetExePath.Trim('"')
        # Verify that the nuget.exe path was successfully retrieved.
        if (-not (Test-Path $NuGetExePath)) {
            Write-Error "Error: Vcpkg's nuget.exe not found at $NuGetExePath. Fetch command might have failed."
            exit 1
        }
        Write-Host "Vcpkg's nuget.exe path: $NuGetExePath"
        # 3. Define variables for NuGet feed configuration.
        $Owner = "${{ github.repository_owner }}"
        $FeedUrl = "https://nuget.pkg.github.com/$Owner/index.json"
        $Username = "$Owner"
        $Password = "${{ github.token }}"
        
        # 4. Add the 'github' source using vcpkg's nuget.exe.
        # This command modifies the default NuGet.Config for this user/environment,
        # which vcpkg's internal nuget.exe is likely to use.
        & "$NuGetExePath" sources add `
            -Name github `
            -Source "$FeedUrl" `
            -UserName "$Username" `
            -Password "$Password" `
            -ProtocolVersion 3 `
            -StorePasswordInClearText # Required for the GitHub token to work as a password.

    
        # 5. Determine the standard NuGet.Config location and add package source mapping.
        $NuGetConfigDir = Join-Path -Path $env:APPDATA -ChildPath "NuGet"
        $NuGetConfigFile = Join-Path -Path $NuGetConfigDir -ChildPath "NuGet.Config"
        New-Item -ItemType Directory -Path $NuGetConfigDir -Force | Out-Null
        Write-Host "Modifying NuGet.Config at: $NuGetConfigFile"

        [xml]$config = Get-Content -Path $NuGetConfigFile -Encoding UTF8
        $packageSourceMapping = $config.configuration.packageSourceMapping
        if (-not $packageSourceMapping) {
          $packageSourceMapping = $config.configuration.AppendChild($config.CreateElement("packageSourceMapping"))
        }

        # Clear any existing mappings to ensure a clean state
        $packageSourceMapping.RemoveAll()

        # A. Add the default nuget.org source if it doesn't exist
        $nugetSource = $config.configuration.packageSources.SelectSingleNode("add[@key='nuget.org']")
        if (-not $nugetSource) {
            $nugetSource = $config.CreateElement("add")
            $nugetSource.SetAttribute("key", "nuget.org")
            $nugetSource.SetAttribute("value", "https://api.nuget.org/v3/index.json")
            $config.configuration.packageSources.AppendChild($nugetSource)
        }

        # B. Define a mapping for the public nuget.org feed to be the default
        $publicSourceMapping = $packageSourceMapping.AppendChild($config.CreateElement("packageSource"))
        $publicSourceMapping.SetAttribute("key", "nuget.org")
        $catchAllPattern = $publicSourceMapping.AppendChild($config.CreateElement("package"))
        $catchAllPattern.SetAttribute("pattern", "*") # This is the crucial part

        # C. Define the mapping for your private GitHub feed
        $githubSourceMapping = $packageSourceMapping.AppendChild($config.CreateElement("packageSource"))
        $githubSourceMapping.SetAttribute("key", "github")
        $patterns = @(
          "rocksdb_x64-windows",
          "zlib_x64-windows",
          "lz4_x64-windows",
          "snappy_x64-windows",
          "vcpkg-cmake_x64-windows",
          "vcpkg-cmake-config_x64-windows"
        )
        foreach ($pattern in $patterns) {
          $packageNode = $githubSourceMapping.AppendChild($config.CreateElement("package"))
          $packageNode.SetAttribute("pattern", $pattern)
        }
        $config.Save($NuGetConfigFile)
    
        Write-Host "--- Raw content of NuGet.Config (after vcpkg's nuget.exe config) ---"
        Get-Content -Path $NuGetConfigFile -Raw
        Write-Host "----------------------------------"
    
        # 6. Install RocksDB using vcpkg
        & "${{ env.VCPKG_ROOT }}\vcpkg.exe" install rocksdb:x64-windows --debug
      shell: pwsh
      env:
        VCPKG_ROOT: ${{ github.workspace }}\vcpkg
        VCPKG_BINARY_SOURCES: "clear;nuget,github,readwrite"
        VCPKG_DEBUG: 1

    # --- Build Wheels Step ---
    - name: Build wheels
      run: cibuildwheel --output-dir wheelhouse

    - name: Upload wheels as artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl
