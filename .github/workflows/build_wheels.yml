# .github/workflows/build_wheels.yml

name: Build Python Wheels - pyrex

on:
  push:
    branches:
      - main  # Trigger on pushes to the 'main' branch
      - develop # Optional: Trigger on pushes to a 'develop' branch
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Define a matrix to build on different OS and Python versions
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # cibuildwheel will manage the specific Python versions,
        # so we don't need to list them explicitly here in the matrix.
        # However, for clarity or if you had specific Python setup needs,
        # you could add python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch all history for setuptools_scm if you use it for dynamic versioning
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # cibuildwheel handles specific Python versions

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel # Install cibuildwheel

    - name: Install RocksDB (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # Install RocksDB development libraries
        sudo apt-get install -y librocksdb-dev libsnappy-dev liblz4-dev zlib1g-dev libbz2-dev

    - name: Install RocksDB (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        # Install RocksDB using Homebrew
        brew install rocksdb

    - name: Install RocksDB (Windows via vcpkg)
      if: runner.os == 'Windows'
      # This step sets up vcpkg and installs RocksDB.
      # It can be complex; this is a simplified example.
      # For production, consider pre-building RocksDB or a more robust vcpkg setup.
      run: |
        # Download and install vcpkg
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
        # Install rocksdb. Adjust triplet if needed (e.g., x64-windows-static)
        .\vcpkg\vcpkg.exe install rocksdb:x64-windows
      env:
        # Set environment variable for vcpkg root so setup.py can find it
        VCPKG_ROOT: ${{ github.workspace }}\vcpkg

    - name: Build wheels
      run: cibuildwheel --output-dir wheelhouse
      env:
        # CIBW_SKIP: "pp* cp36* cp37*" # Skip older Python versions if not supported
        # CIBW_ARCHS_WINDOWS: "AMD64" # Only build for 64-bit on Windows
        # CIBW_ENVIRONMENT_WINDOWS: "VCPKG_ROOT=${{ github.workspace }}\\vcpkg"
        # If you need to pass specific include/lib paths to setup.py for RocksDB
        # CIBW_ENVIRONMENT: "ROCKSDB_INCLUDE_DIR=/usr/local/include ROCKSDB_LIB_DIR=/usr/local/lib"
        # For Windows, you might need to tell setup.py where vcpkg installed libs are
        # For example, if your setup.py needs it:
        # CIBW_ENVIRONMENT_WINDOWS: "ROCKSDB_INCLUDE_DIRS=${{ github.workspace }}\\vcpkg\\installed\\x64-windows\\include ROCKSDB_LIBRARY_DIRS=${{ github.workspace }}\\vcpkg\\installed\\x64-windows\\lib"
        # Ensure your setup.py's build_ext logic correctly uses these env vars.

    - name: Upload wheels as artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-wheels
        path: ./wheelhouse/*.whl

    # Optional: Add a step to publish to PyPI on release tags
    # - name: Publish to PyPI
    #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    #   run: |
    #     pip install twine
    #     twine upload --non-interactive --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} wheelhouse/*.whl
    #   env:
    #     # Define PYPI_API_TOKEN as a repository secret in GitHub
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
