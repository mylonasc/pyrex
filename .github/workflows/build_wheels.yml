# .github/workflows/build_wheels.yml

name: Build Python Wheels

on:
  push:
    branches:
      - main  # Trigger on pushes to the 'main' branch
      - develop # Optional: Trigger on pushes to a 'develop' branch
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Define a matrix to build on different OS
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # cibuildwheel will manage the specific Python versions (e.g., cp38, cp39, etc.)
        # within each OS environment, so we don't need to list them explicitly here.

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch all history for setuptools_scm if you use it for dynamic versioning
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # cibuildwheel handles specific Python versions

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel # Install cibuildwheel

    - name: Install RocksDB (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # Install RocksDB development libraries and its dependencies
        sudo apt-get install -y librocksdb-dev libsnappy-dev liblz4-dev zlib1g-dev libbz2-dev

    - name: Debug RocksDB Paths (Linux)
      if: runner.os == 'Linux'
      run: |
        echo "--- Listing contents of /usr/include/ ---"
        ls -R /usr/include/ | grep -E "rocksdb|db.h" || true # List /usr/include, filter for rocksdb or db.h, ignore errors if not found
        echo "--- Listing contents of /usr/local/include/ ---"
        ls -R /usr/local/include/ | grep -E "rocksdb|db.h" || true
        echo "--- Listing contents of /usr/lib/ ---"
        ls -R /usr/lib/ | grep -E "rocksdb|librocksdb" || true
        echo "--- Listing contents of /usr/local/lib/ ---"
        ls -R /usr/local/lib/ | grep -E "rocksdb|librocksdb" || true
        echo "--- Searching for db.h globally ---"
        find /usr /opt -name "db.h" 2>/dev/null | grep "rocksdb" || true
        echo "--- Checking ldconfig for rocksdb libraries ---"
        sudo ldconfig -p | grep rocksdb || true
      shell: bash # Ensure bash is used for grep/find commands

    - name: Install RocksDB (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        # Install RocksDB using Homebrew
        brew install rocksdb

    - name: Debug RocksDB Paths (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "--- Listing contents of /usr/local/include/ ---"
        ls -R /usr/local/include/ | grep -E "rocksdb|db.h" || true
        echo "--- Listing contents of /usr/local/lib/ ---"
        ls -R /usr/local/lib/ | grep -E "rocksdb|librocksdb" || true
        echo "--- Searching for db.h globally ---"
        find /usr/local /opt -name "db.h" 2>/dev/null | grep "rocksdb" || true
        echo "--- Checking dynamic libraries for rocksdb ---"
        # On macOS, libraries are often .dylib, and `otool -L` is used for dependencies
        # This is more for runtime, but helps confirm installation
        find /usr/local/lib -name "librocksdb*.dylib" || true
      shell: bash

    - name: Install RocksDB (Windows via vcpkg)
      if: runner.os == 'Windows'
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
        .\vcpkg\vcpkg.exe install rocksdb:x64-windows
      env:
        VCPKG_ROOT: ${{ github.workspace }}\vcpkg

    - name: Debug RocksDB Paths (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "--- Listing contents of VCPKG_ROOT include directory ---"
        dir ${{ env.VCPKG_ROOT }}\installed\x64-windows\include\rocksdb /s || true
        echo "--- Listing contents of VCPKG_ROOT lib directory ---"
        dir ${{ env.VCPKG_ROOT }}\installed\x64-windows\lib /s || true
        echo "--- Searching for rocksdb.h ---"
        # Adjust path if needed based on VCPKG_ROOT
        Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\x64-windows\include" -Filter "db.h" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName || true
        echo "--- Searching for rocksdb.lib/dll ---"
        Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\x64-windows\lib" -Filter "rocksdb*" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName || true
      shell: pwsh # Use PowerShell for Windows commands

    - name: Build wheels
      run: cibuildwheel --output-dir wheelhouse
      env:
        # --- BEGIN MODIFIED SECTION ---
        # Explicitly set CFLAGS and LDFLAGS for cibuildwheel to pass directly to the compiler.
        # This gives us precise control over include and library paths.
        # The -I/usr/include/ is correct because rocksdb/db.h is found under /usr/include/rocksdb/
        # The -L/usr/lib/ is correct because librocksdb.so is found directly under /usr/lib/
        CIBW_CFLAGS_LINUX: "-I/usr/include/"
        CIBW_LDFLAGS_LINUX: "-L/usr/lib/ -lrocksdb" # -lrocksdb for linking the library

        # macOS specific flags (assuming brew installs to /usr/local)
        CIBW_CFLAGS_MACOS: "-I/usr/local/include/"
        CIBW_LDFLAGS_MACOS: "-L/usr/local/lib/ -lrocksdb"

        # Windows specific flags (adjust based on vcpkg output)
        CIBW_CFLAGS_WINDOWS: "-I${{ github.workspace }}\\vcpkg\\installed\\x64-windows\\include"
        CIBW_LDFLAGS_WINDOWS: "-L${{ github.workspace }}\\vcpkg\\installed\\x64-windows\\lib -lrocksdb" # Use rocksdb.lib
        # --- END MODIFIED SECTION ---

        # Other cibuildwheel environment variables (if needed for other purposes)
        # CIBW_SKIP: "pp* cp36* cp37*"
        # CIBW_ARCHS_WINDOWS: "AMD64"

    - name: Upload wheels as artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-wheels
        path: ./wheelhouse/*.whl

    # Optional: Add a step to publish to PyPI on release tags
    # - name: Publish to PyPI
    #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    #   run: |
    #     pip install twine
    #     twine upload --non-interactive --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} wheelhouse/*.whl
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

