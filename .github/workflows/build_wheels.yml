name: Build Python Wheels

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90 # Increased timeout to ensure the *initial* long build finishes
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest] # Uncomment these when ready
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # --- Start Vcpkg Caching ---
    # Cache the vcpkg tool itself (cloned repository)
    - name: Cache vcpkg tool
      id: cache-vcpkg-tool
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg
        key: ${{ runner.os }}-vcpkg-tool-${{ hashFiles('vcpkg/.git/HEAD') }} # Key changes if vcpkg repo updates
        restore-keys: |
          ${{ runner.os }}-vcpkg-tool-

    # Cache vcpkg's installed binary packages (pre-built RocksDB)
    - name: Cache vcpkg installed packages
      id: cache-vcpkg-installed
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg/installed
        key: ${{ runner.os }}-vcpkg-installed-${{ hashFiles('vcpkg/vcpkg.exe') }}-${{ hashFiles('vcpkg/ports/rocksdb/portfile.cmake') }} # Key for installed packages
        restore-keys: |
          ${{ runner.os }}-vcpkg-installed-
    # --- End Vcpkg Caching ---

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel

    - name: Install RocksDB (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install rocksdb

    - name: Get Homebrew prefix (macOS)
      if: runner.os == 'macOS'
      id: brew_prefix
      run: echo "BREW_PREFIX=$(brew --prefix)" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Debug RocksDB Paths (macOS)
      if: runner.os == 'macOS'
      run: |
        BREW_PREFIX="${{ steps.brew_prefix.outputs.BREW_PREFIX }}"
        echo "Homebrew prefix: $BREW_PREFIX"
        echo "--- Listing contents of $BREW_PREFIX/include/ ---"
        ls -R "$BREW_PREFIX/include/" | grep -E "rocksdb|db.h" || true
        echo "--- Listing contents of $BREW_PREFIX/lib/ ---"
        ls -R "$BREW_PREFIX/lib/" | grep -E "rocksdb|librocksdb" || true
        echo "--- Searching for db.h globally (within brew prefix) ---"
        find "$BREW_PREFIX" -name "db.h" 2>/dev/null | grep "rocksdb" || true
        echo "--- Checking dynamic libraries for rocksdb (within brew prefix) ---"
        find "$BREW_PREFIX/lib" -name "librocksdb*.dylib" || true
      shell: bash

    - name: Install RocksDB (Windows via vcpkg)
      if: runner.os == 'Windows'
      run: |
        # Only clone if vcpkg wasn't restored by cache
        if (-not (Test-Path -Path ".\vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git
        }
        # Bootstrap vcpkg
        .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
        # Install rocksdb, leveraging the binary cache
        .\vcpkg\vcpkg.exe install rocksdb:x64-windows
      env:
        VCPKG_ROOT: ${{ github.workspace }}\vcpkg
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite" # This enables GitHub Actions Cache for Vcpkg binaries

    - name: Debug RocksDB Paths (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "--- Listing contents of VCPKG_ROOT include directory ---"
        dir "${{ env.VCPKG_ROOT }}\installed\x64-windows\include\rocksdb" /s || true
        echo "--- Listing contents of VCPKG_ROOT lib directory ---"
        dir "${{ env.VCPKG_ROOT }}\installed\x64-windows\lib" /s || true
        echo "--- Searching for db.h ---"
        Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\x64-windows\include" -Filter "db.h" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName || true
        echo "--- Searching for rocksdb.lib/dll ---"
        Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\x64-windows\lib" -Filter "rocksdb*" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName || true
      shell: pwsh

    - name: Build wheels
      run: cibuildwheel --output-dir wheelhouse
      env:
        CIBW_BUILD_LINUX: "cp*-manylinux_x86_64"
        CIBW_SKIP: "*-musllinux_*"

        CIBW_BEFORE_BUILD_LINUX: |
          yum install -y rocksdb-devel snappy-devel lz4-devel zlib-devel bzip2-devel || \
          (apt-get update && apt-get install -y librocksdb-dev libsnappy-dev liblz4-dev zlib1g-dev libbz2-dev)
          echo "--- Debugging inside manylinux container after RocksDB install (via rpm -ql) ---"
          echo "Files installed by rocksdb-devel:"
          rpm -ql rocksdb-devel || true
          echo "Files installed by rocksdb (main library):"
          rpm -ql rocksdb || true
          echo "--- End rpm -ql output ---"

        CIBW_CFLAGS_LINUX: "-I/usr/include/"
        CIBW_LDFLAGS_LINUX: "-L/usr/lib/ -lrocksdb"

        CIBW_CFLAGS_MACOS: "-I${{ steps.brew_prefix.outputs.BREW_PREFIX }}/include/"
        CIBW_LDFLAGS_MACOS: "-L${{ steps.brew_prefix.outputs.BREW_PREFIX }}/lib/ -lrocksdb"

        # Corrected Windows specific flags: Ensure DLLs are on PATH for runtime linking if needed
        CIBW_CFLAGS_WINDOWS: "-I${{ github.workspace }}\\vcpkg\\installed\\x64-windows\\include"
        CIBW_LDFLAGS_WINDOWS: "-L${{ github.workspace }}\\vcpkg\\installed\\x64-windows\\lib -lrocksdb"
        # Add VCPKG_ROOT/installed/x64-windows/bin to PATH for runtime DLL discovery
        PATH: "${{ env.PATH }};${{ github.workspace }}\\vcpkg\\installed\\x64-windows\\bin"

    - name: Upload wheels as artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-wheels
        path: ./wheelhouse/*.whl
