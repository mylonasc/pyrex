# .github/workflows/build_wheels.yml
name: Build Python Wheels

on:
  push:
    branches:
      - main
      - fix-windows-build
      - develop
  pull_request:
    branches:
      - main
      - fix-windows-build
      - develop
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120 # Set a higher timeout for the job (e.g., 120 minutes)
    permissions:
      contents: read
      packages: write # Crucial for pushing to GitHub Packages
    strategy:
      matrix:
        # Build on all three platforms
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      # Define VCPKG_ROOT for Windows (used in Windows-specific steps)
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # cibuildwheel will manage specific Python versions
        architecture: 'x64' # Ensure 64-bit Python is set up

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel

    # --- macOS Specific Steps ---
    - name: Install RocksDB (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install rocksdb

    - name: Get Homebrew prefix (macOS)
      if: runner.os == 'macOS'
      id: brew_prefix
      # Set BREW_PREFIX as an environment variable that cibuildwheel will pick up
      run: echo "BREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
      shell: bash

    - name: Debug RocksDB Paths (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "Homebrew prefix: ${{ env.BREW_PREFIX }}"
        echo "--- Listing contents of ${{ env.BREW_PREFIX }}/include/ ---"
        ls -R "${{ env.BREW_PREFIX }}/include/" | grep -E "rocksdb|db.h" || true
        echo "--- Listing contents of ${{ env.BREW_PREFIX }}/lib/ ---"
        ls -R "${{ env.BREW_PREFIX }}/lib/" | grep -E "rocksdb|librocksdb" || true
      shell: bash

    # --- Windows Specific Steps (Vcpkg and RocksDB Installation) ---
    - name: Export GitHub Actions cache environment variables (for Windows)
      uses: actions/github-script@v7
      if: runner.os == 'Windows'
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install RocksDB (Windows via vcpkg)
      if: runner.os == 'Windows'
      run: |
        # 1. Bootstrap vcpkg
        git clone https://github.com/microsoft/vcpkg.git "${{ env.VCPKG_ROOT }}"
        cmd /c "`"${{ env.VCPKG_ROOT }}\bootstrap-vcpkg.bat`" -disableMetrics"

        # 2. Get the path to the nuget.exe that vcpkg uses internally.
        $NuGetExePath = & "${{ env.VCPKG_ROOT }}\vcpkg.exe" fetch nuget
        $NuGetExePath = $NuGetExePath.Trim().Trim('"') # Trim whitespace and quotes
        if (-not (Test-Path $NuGetExePath)) {
            Write-Error "Error: Vcpkg's nuget.exe not found at $NuGetExePath. Fetch command might have failed."
            exit 1
        }
        Write-Host "Vcpkg's nuget.exe path: $NuGetExePath"

        # 3. Define variables for NuGet feed configuration.
        $Owner = "${{ github.repository_owner }}"
        $FeedUrl = "https://nuget.pkg.github.com/$Owner/index.json"
        $Username = "$Owner"
        $Password = "${{ github.token }}"

        # 4. Add the 'github' source using vcpkg's nuget.exe.
        & "$NuGetExePath" sources add `
            -Name github `
            -Source "$FeedUrl" `
            -UserName "$Username" `
            -Password "$Password" `
            -ProtocolVersion 3 `
            -StorePasswordInClearText

        # 5. Determine the standard NuGet.Config location and add package source mapping.
        $NuGetConfigDir = Join-Path -Path $env:APPDATA -ChildPath "NuGet"
        $NuGetConfigFile = Join-Path -Path $NuGetConfigDir -ChildPath "NuGet.Config"
        New-Item -ItemType Directory -Path $NuGetConfigDir -Force | Out-Null
        Write-Host "Modifying NuGet.Config at: $NuGetConfigFile"

        [xml]$config = Get-Content -Path $NuGetConfigFile -Encoding UTF8
        $packageSourceMapping = $config.configuration.packageSourceMapping
        if (-not $packageSourceMapping) {
            $packageSourceMapping = $config.configuration.AppendChild($config.CreateElement("packageSourceMapping"))
        }
        $githubSourceMapping = $packageSourceMapping.SelectSingleNode("packageSource[@key='github']")
        if (-not $githubSourceMapping) {
            $githubSourceMapping = $packageSourceMapping.AppendChild($config.CreateElement("packageSource"))
            $githubSourceMapping.SetAttribute("key", "github")
        }
        $githubSourceMapping.RemoveAll() # Clear existing patterns
        $githubSourceMapping.SetAttribute("key", "github") # Re-add key

        # Define the package patterns. Adjust these if vcpkg uses different package IDs.
        $patterns = @(
            "rocksdb_x64-windows",
            "zlib_x64-windows",
            "lz4_x64-windows",
            "snappy_x64-windows",
            "vcpkg-cmake_x64-windows",
            "vcpkg-cmake-config_x64-windows"
        )
        foreach ($pattern in $patterns) {
            $packageNode = $githubSourceMapping.AppendChild($config.CreateElement("package"))
            $packageNode.SetAttribute("pattern", $pattern)
        }
        $config.Save($NuGetConfigFile)

        Write-Host "--- Raw content of NuGet.Config (after vcpkg's nuget.exe config) ---"
        Get-Content -Path $NuGetConfigFile -Raw
        Write-Host "----------------------------------"
        Write-Host "--- Verifying sources with vcpkg's nuget.exe ---"
        & "$NuGetExePath" sources list -ConfigFile "$NuGetConfigFile" -Verbosity detailed -ForceEnglishOutput
        Write-Host "------------------------------------------------"

        # 6. Install RocksDB using vcpkg, which will now use the configured NuGet cache.
        & "${{ env.VCPKG_ROOT }}\vcpkg.exe" install rocksdb:x64-windows --debug
        echo "VCPKG_ROOT: ${{ env.VCPKG_ROOT }}" # Confirm VCPKG_ROOT is set correctly
      shell: pwsh
      env:
        VCPKG_ROOT: ${{ github.workspace }}\vcpkg
        VCPKG_BINARY_SOURCES: "clear;nuget,github,readwrite" # Crucial for vcpkg to use your cache
        VCPKG_DEBUG: 1 # Add this line for verbose output from vcpkg

    - name: Debug RocksDB Paths (Windows)
      if: runner.os == 'Windows'
      continue-on-error: true
      run: |
        echo "Current VCPKG_ROOT value: ${{ env.VCPKG_ROOT }}"
        echo "--- Listing contents of VCPKG_ROOT include directory ---"
        $RocksDBIncludePath = Join-Path -Path "${{ env.VCPKG_ROOT }}" -ChildPath "installed\x64-windows\include\rocksdb"
        Get-ChildItem -Path $RocksDBIncludePath -Recurse -ErrorAction SilentlyContinue | Select-Object FullName
        echo "--- Listing contents of VCPKG_ROOT lib directory ---"
        $RocksDBLibPath = Join-Path -Path "${{ env.VCPKG_ROOT }}" -ChildPath "installed\x64-windows\lib"
        Get-ChildItem -Path $RocksDBLibPath -Recurse -ErrorAction SilentlyContinue | Select-Object FullName
        echo "--- Searching for rocksdb.h ---"
        $RocksDBHeadersRoot = Join-Path -Path "${{ env.VCPKG_ROOT }}" -ChildPath "installed\x64-windows\include"
        Get-ChildItem -Path $RocksDBHeadersRoot -Filter "db.h" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName
        echo "--- Searching for rocksdb.lib/dll ---"
        $RocksDBLibsRoot = Join-Path -Path "${{ env.VCPKG_ROOT }}" -ChildPath "installed\x64-windows\lib"
        Get-ChildItem -Path $RocksDBLibsRoot -Filter "rocksdb*" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName
      env:
        VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      shell: pwsh

    # --- Build Wheels Step ---
    - name: Build wheels
      run: cibuildwheel --output-dir wheelhouse
      # All CIBW_* environment variables should now be managed by pyproject.toml
      # except for the BREW_PREFIX which is set dynamically in the workflow.

    - name: Upload wheels as artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-wheels
        path: ./wheelhouse/*.whl
