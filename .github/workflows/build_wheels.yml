# .github/workflows/build_wheels.yml
name: Build Python Wheels
on:
  push:
    branches:
      - main
      - fix-windows-build
      - develop
  pull_request:
    branches:
      - main
      - fix-windows-build
      - develop
  workflow_dispatch:
jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        os: [windows-latest]
    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python # This step *is* important for the overall environment
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Keep 3.x here, as cibuildwheel will manage specific versions
        architecture: 'x64'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel

    # ... (Keep existing macOS and Windows RocksDB installation steps - they are fine) ...

    - name: Build wheels
      run: cibuildwheel --output-dir wheelhouse
      env:
        # Keep your existing Linux and macOS configurations
        CIBW_BUILD_LINUX: "cp*-manylinux_x86_64"
        CIBW_SKIP: "*-musllinux_*"
        CIBW_BEFORE_BUILD_LINUX: |
          yum install -y rocksdb-devel snappy-devel lz4-devel zlib-devel bzip2-devel || \
          (apt-get update && apt-get install -y librocksdb-dev libsnappy-dev liblz4-dev zlib1g-dev libbz2-dev)
          echo "--- Debugging inside manylinux container after RocksDB install (via rpm -ql) ---"
          rpm -ql rocksdb-devel || true
          rpm -ql rocksdb || true
          echo "--- End rpm -ql output ---"
        CIBW_CFLAGS_LINUX: "-I/usr/include/"
        CIBW_LDFLAGS_LINUX: "-L/usr/lib/ -lrocksdb"
        CIBW_CFLAGS_MACOS: "-I${{ steps.brew_prefix.outputs.BREW_PREFIX }}/include/"
        CIBW_LDFLAGS_MACOS: "-L${{ steps.brew_prefix.outputs.BREW_PREFIX }}/lib/ -lrocksdb"

        # *** Crucial Changes for Windows ***
        # Tell cibuildwheel to build specifically for CPython 3.8 on AMD64 Windows
        CIBW_BUILD_WINDOWS: "cp38-win_amd64"
        CIBW_ARCHS_WINDOWS: "AMD64"
        # Enable pre-release Pythons (often includes specific patch versions like 3.8.10)
        CIBW_PRERELEASE_PYTHONS: "True"
        # Force cibuildwheel to re-install Python interpreters even if found (to ensure it uses its own method)
        # This might seem counter-intuitive, but it can make cibuildwheel use its *preferred* download method
        # instead of searching the system PATH or falling back to NuGet.
        CIBW_FORCE_INSTALL: "1"
        # Set the download base URL for Python if cibuildwheel's default is failing
        # This explicitly points cibuildwheel to the official Python download site.
        CIBW_DOWNLOAD_URL_WINDOWS: "https://www.python.org/ftp/python/"

        # Debugging cibuildwheel's internal workings
        CIBW_DEBUG: "1" # Keep this for verbose logging if it still fails

        CIBW_CFLAGS_WINDOWS: "-I${{ github.workspace }}\\vcpkg\\installed\\x64-windows\\include"
        CIBW_LDFLAGS_WINDOWS: "-L${{ github.workspace }}\\vcpkg\\installed\\x64-windows\\lib -lrocksdb"

    - name: Upload wheels as artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-wheels
        path: ./wheelhouse/*.whl
